========================================
ENHANCED GLOWING CORE ORB & BREATHING MESH ANIMATION
========================================

IMPLEMENTATION DETAILS:
-----------------------

1. CORE ORB SPECIFICATIONS:
---------------------------
- Position: Center of visualization (0, 0, 0)
- Geometry: THREE.SphereGeometry
- Radius: 200 units
- Segments: 64 x 64 (increased for smoother appearance)

2. CORE ORB MATERIAL PROPERTIES:
-------------------------------
- Base Material: MeshBasicMaterial
- Color: Pure White (0xffffff)
- Emissive: 0xffffff (glowing effect)
- EmissiveIntensity: 1.0
- Render Order: -1 (ensures rendering behind other elements)

3. POINT LIGHT GLOW:
------------------
- Type: THREE.PointLight
- Color: Pure White (0xffffff)
- Intensity: 3.0 (with pulsation between 1.5 and 4.5)
- Distance: 2000 units
- Position: Center (0, 0, 0)

4. ADDITIONAL GLOW EFFECT:
------------------------
- Secondary Sphere: SphereGeometry with radius 300
- Material: Custom ShaderMaterial
- Side: THREE.BackSide (renders on inside of sphere)
- Blending: THREE.AdditiveBlending
- Transparency: true
- depthWrite: false
- Higher opacity: 0.4 (increased from 0.3)

5. SHADER DETAILS:
----------------
- Vertex Shader: Standard position and normal calculations
- Fragment Shader: Computes glow based on view angle and depth
- Glow Calculation: pow(0.9 - dot(vNormal, vec3(0, 0, 1.0)), 3.0) * intensity
- Depth Calculation: 1.0 - min(1.0, length(vPosition) / 400.0)
- Uniforms: 
  * glowColor: rgb(0xffffff) - Pure white
  * intensity: Dynamic value (1.5 + sin(t) * 0.5) - Higher base and variation

6. BREATHING ANIMATION FORMULA:
-----------------------------
- Timing: t = performance.now() * 0.0005
- Scale Calculation: scale = 1 + Math.sin(t) * 0.05
- Applied To: Galaxy container object (entire node mesh)
- Oscillation: 5% variation in scale (1.0 to 1.05)
- Synchronization: Core orb glow and point light intensity synced to same timing function
- Glow Intensity: 1.5 + Math.sin(t) * 0.5 (50% intensity variation with higher base)
- Point Light Intensity: 3.0 + Math.sin(t) * 1.5 (50% intensity variation)

7. PERFORMANCE CONSIDERATIONS:
----------------------------
- Single central object with efficient shader
- Point light adds minimal overhead with significant visual impact
- Shared timing function for synchronization of all animations
- Scale applied to node group rather than individual elements

8. VISUAL EFFECT:
---------------
- Central white orb appears as a luminous, radiant core
- The point light casts illumination onto nearby nodes
- Pulsating light creates sense of energy and power
- Breathing animation of the entire mesh creates a living, organic feel
- Visual harmony between core pulsation, light intensity, and mesh breathing

9. INTEGRATION:
-------------
- Core orb initialized after galaxy container
- Point light added to scene directly
- Breathing animation applied in main animation loop
- Render order ensures proper layering
- Camera and controls remain unaffected